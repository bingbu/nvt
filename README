	V4L2N Image and Video test tool
	-------------------------------
	Copyright 2011-2013 Intel
	Author: Tuukka Toivonen <tuukka.toivonen@intel.com>

= Introduction =

v4l2n is a simple very low level command line test tool for Linux V4L2 video
and image capture interface developed from scratch. It allows very precise
control of the V4L2 interface and displays detailed information on exchanged
data structures.

It has been developed for Android/x86 but should work on generic Linux
systems once compiled. It is standalone and independent of Android tree
during compilation and usage.

v4l2n by default supports some Intel-specific extensions to the V4L2
interface. These can be compile-time disabled. All necessary header
files are included with the v4l2n package so there are no dependencies
to external V4L2 or AtomISP header files.

v4l2n can capture images and store them to raw files. The raw files can
be converted to standard pnm files using the companion raw2pnm tool.
v4l2n also allows setting and querying of V4L2 controls.

The philosophy of v4l2n:
- Have everywhere sane default values to simplify usage
- Allow user to control every detail and order of the issued system calls
- Do nothing unless told to do
- Display detailed and complete exchange of structures with the kernel
  when in verbose mode
- Check for all possible errors and abort immediately if one happens

= Requirements =

For compilation, a Linux system with only gcc and static C libraries are
needed. The libraries are linked statically so that there are no dependencies
to Android. To run on Android/x86, only adb is required to be properly
installed. In Windows, adb requires special USB drivers, but on Linux
that is not needed.

= Obtaining and Compiling =

v4l2n anonymous repository is on TeamForge:
	git://git-amr-4.devtools.intel.com/v4l2n-source.git
	http://git-amr-4.devtools.intel.com/gerrit/gitweb?p=v4l2n-source.git
you can clone the source tree with:
	git clone git://git-amr-4.devtools.intel.com/v4l2n-source.git
Precompiled binary packages are also available on TeamForge project v4l2n.
You may need TeamForge account to access these.


Compilation:
	cd v4l2n-source
	make

This should create v4l2n which is the main binary and raw2pnm which
converts raw files to pnm.

= Usage =

Run
	./v4l2n --help
to list available options. v4l2n processes options one by one, executing
them while parsing, and displaying results. So, you could use options
several times, for example --capture=30 --waitkey --capture=40 to capture
30 frames, wait enter key, and then capture 40 frames more.
First 100 frames are stored into memory and written to disk files when
v4l2n quits.

Most of the options correspond directly to V4L2 ioctls but without the
VIDIOC_X_ prefix. See
	http://v4l2spec.bytesex.org/spec/
	http://linuxtv.org/downloads/v4l-dvb-apis/
for documentation of the interface. The options take structure field
names directly as parameters. For example, you could set the format with
option "--fmt type=1,width=640,height=480,pixelformat=NV12" which corresponds
to VIDIOC_S_FMT and struct v4l2_format. Often both symbolic names and
numeric values are accepted, such as for the "pixelformat" field. All of
the options are listed with "--help" but unfortunately the description of the
fields is incomplete. Please use source code and the links above to check
possible structure field names.

The philosophy of v4l2n is that all options have some sane default values
and only those need to be given for which the default is not suitable.
If the video device is not opened explicitly with --device, it is assumed
to be /dev/video0 and opened automatically by most options. Similarly,
with other options, field values need not to be specified unless the defaults
are not suitable.

V4L2 controls can be get, set, and queried with the --ctrl command. The
list of supported controls is shown with option --ctrl-list. To set a simple
control values (VIDIOC_S_CTRL) use option "--ctrl=HFLIP=1", for example.
Usually extended controls are preferred and those are selected by adding
a "+" sign after control name, such as "--ctrl=HFLIP+=1". You can get values
by using a question mark, eg. "--ctrl=HFLIP?" or "--ctrl=HFLIP+?" for
VIDIOC_G_EXT_CTRLS. Use a hash character "#" to query control
("--ctrl='HFLIP#'").

== v4l2n.sh ==

Since v4l2n is a very low-level tool, the user must specify exactly what
he or she wants to do. This may lead to quite long command lines.
For Linux host users, there is alternatively a script v4l2n.sh designed
to interface with Android using adb. Automatic image capture can be launched
with host Linux command lines:
	export V4L2N_INPUT=X
	./v4l2n.sh -a
where X is 0 or 1, depending whether main or secondary camera is to be
used. Use
	./v4l2n.sh --enuminput
to enumerate device cameras. When run, v4l2n.sh -a
	- Gets settings from environment variables
		* V4L2N_WIDTH, V4L2N_HEIGHT: capture resolution
		* V4L2N_FORMAT: image format, default NV12
		* V4L2N_INPUT: input device, usually 0 or 1
		* V4L2N_VIEWER: program launched for viewing .pnm files
		* V4L2N_DIR: Android directory where to store captured images
	  All of the variables have some default values which hopefully work
	- Remounts /system directory into read-write mode and copies v4l2n
	  binary into that directory
	- Runs v4l2n capturing two images into Android filesystem
	- Transfers images from Android to host using adb and converts them
	  to pnm
	- Finally V4L2N_VIEWER (by default gqview) is launched to display
	  images

Without the -a option, v4l2n.sh does the remounting and copying of v4l2n
into the device but runs v4l2n with command line given to v4l2n.sh. Thus,
you could query the current format with
	./v4l2n.sh "--fmt='?'"
You may need to quote the parameters given to v4l2n.sh.

== Examples ==

Setting exposure (Intel V4L2 extension):
	./v4l2n.sh --exposure=12,34,56,78
where 12 is coarse exposure, 34 is fine exposure, 56 is analog gain,
and 78 is digital gain. These are directly register values.

Run eternal viewfinder with adb (works from Windows prompt too):
	adb root
	adb remount
	adb push v4l2n /system/
	adb shell /system/v4l2n --input 1 --parm type=1 --fmt 
		type=1,width=800,height=600,pixelformat=NV12 --reqbufs
		count=3,memory=USERPTR 	--capture=999999
		-o /cache/testimage_@.raw
Only 100 first frames are saved to memory, the rest are discarded. Since v4l2n
in practice will run eternally, the captured images are never saved to disk.

Display list of image formats supported by v4l2n:
	./v4l2n --fmt-list
Note that neither AtomISP driver nor raw2pnm supports all of these. Use
SGRBG10 to capture raw Bayer images and NV12 to capture images in YUV
colorspace. Currently raw2pnm supports only conversion of NV12 images into
pnm files, support for SGRBG10 will be probably added later.

Capture two images and save to files, check what was the format actually used:
	./v4l2n.sh "--input 1 --parm type=1 --fmt
		type=1,width=640,height=480,pixelformat=NV12 --fmt '?'
		--reqbufs count=2,memory=USERPTR --capture=2
		-o /cache/testimage_@.raw"
The "@" character in file name is replaced with frame number.

Convert raw NV12 file into pnm file:
	./raw2pnm -x 640 -y 480 -f NV12 testimage_001.raw testimage_001.pnm
Remember to check the resolution, it should match with what "--fmt '?'"
displays.

== References ==
	git://git-amr-4.devtools.intel.com/v4l2n-source.git
		(v4l2n repository)
	http://v4l2spec.bytesex.org/spec/
	http://linuxtv.org/downloads/v4l-dvb-apis/
		(V4L2 documentation)
	http://git.ideasonboard.org/yavta.git
		(yet another simple V4L2 testing tool)

---

